<application>
  <component name="ParameterNameHintsSettings">
    <blacklists>
      <blacklist language="Kotlin">
        <added pattern="com.github.davinkevin.podcastserver.business.stats.NumberOfItemByDateWrapper(date,numberOfItems)" />
        <added pattern="java.time.LocalDate.minusWeeks(weeksToSubtract)" />
        <added pattern="java.time.LocalDate.minusDays(daysToSubtract)" />
        <added pattern="java.time.LocalDate.minusMonths(monthsToSubtract)" />
        <added pattern="com.github.davinkevin.podcastserver.podcast.PodcastRepositoryV2.findStatByTypeAndPubDate(numberOfMonth)" />
        <added pattern="am.ik.yavi.constraint.ViolationMessage.of(messageKey,defaultMessageFormat)" />
        <added pattern="org.springframework.web.reactive.function.server.RouterFunctionDsl.POST(pattern,f)" />
        <added pattern="org.springframework.web.reactive.function.server.RouterFunctionDsl.GET(pattern,f)" />
        <added pattern="org.springframework.web.util.UriComponentsBuilder.pathSegment(pathSegments)" />
        <added pattern="java.time.OffsetDateTime.of(year,month,dayOfMonth,hour,minute,second,nanoOfSecond,offset)" />
        <added pattern="java.util.UUID.fromString(name)" />
        <added pattern="org.springframework.web.reactive.function.server.RouterFunctionDsl.PUT(pattern,f)" />
        <added pattern="com.github.benmanes.caffeine.cache.Caffeine.maximumSize(maximumSize)" />
        <added pattern="com.github.benmanes.caffeine.cache.Caffeine.expireAfterWrite(duration,unit)" />
        <added pattern="com.github.benmanes.caffeine.cache.Caffeine.refreshAfterWrite(duration,unit)" />
        <added pattern="com.github.tomakehurst.wiremock.client.WireMock.okJson(body)" />
        <added pattern="org.assertj.core.api.StringAssert.isEqualTo(expectedStringTemplate,args)" />
        <added pattern="com.github.davinkevin.podcastserver.manager.worker.PodcastToUpdate(id,url,signature)" />
        <added pattern="com.airbus.intelligence.subscriptionmanagement.restclient.SubscriptionManagementRestClient.deactivateUser(userUuid)" />
        <added pattern="com.airbus.intelligence.subscriptionmanagement.restclient.SubscriptionManagementRestClient.activateUser(userUuid)" />
        <added pattern="com.nhaarman.mockitokotlin2.times(numInvocations)" />
        <added pattern="com.airbus.intelligence.subscriptionmanagement.restclient.User(uuid,email,activated)" />
        <added pattern="reactor.core.publisher.Flux.flatMap(mapper,concurrency)" />
      </blacklist>
    </blacklists>
    <option id="SHOW_PROPERTY_HINT" value="true" />
    <option id="SHOW_LAMBDA_IMPLICIT_PARAMETER_RECEIVER" value="false" />
  </component>
</application>